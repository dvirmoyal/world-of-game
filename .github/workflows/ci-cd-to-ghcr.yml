name: PythonApp-CI
on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
env:
  IMAGE_NAME: dvir-demo
  IMAGE_TAG: ${{ github.sha }}
  REGISTRY: ghcr.io
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v3
      - name: Set Up Python Environment
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install application Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GHCR }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            Changes in this Release:
            - Docker image built and pushed to GHCR
            - Image tag: ${{ env.IMAGE_TAG }}
          draft: false
          prerelease: false
      - name: Release Result
        if: success()
        run: |
          echo "Release created successfully!"
          echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
      - name: Release Error
        if: failure()
        run: |
          echo "Failed to create release"
  use-image:
    needs: build
    runs-on: self-hosted
    permissions:
      contents: read
      packages: read
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Docker image from GHCR
        run: |
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      - name: Debug Environment
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -R
          echo "Helm version:"
          helm version
          echo "Kubectl version:"
          kubectl version --client
          echo "Kubeconfig:"
          kubectl config view --minify
      - name: Set PowerShell Environment Variables
        shell: powershell
        run: |
          $env:REGISTRY = "${{ env.REGISTRY }}"
          $env:REPO_OWNER = "${{ github.repository_owner }}"
          $env:IMAGE_NAME = "${{ env.IMAGE_NAME }}"
          $env:IMAGE_TAG = "${{ env.IMAGE_TAG }}"
          
          # Output variables for debugging
          echo "REGISTRY: $env:REGISTRY"
          echo "REPO_OWNER: $env:REPO_OWNER"
          echo "IMAGE_NAME: $env:IMAGE_NAME"
          echo "IMAGE_TAG: $env:IMAGE_TAG"


      - name: Update Helm values
        shell: powershell
        run: |  
           cd C:\Users\USER\PycharmProjects\dvir-demo-ci-cd\my-chart
           
           $imageRepository = "$env:REGISTRY/$env:REPO_OWNER/$env:IMAGE_NAME"
           
           helm template my-app ./ --debug `
             --set image.repository=$imageRepository `
             --set image.tag=$env:IMAGE_TAG `
             --set replicaCount=2 `
             --set nameOverride=world-of-games `
             --set namespace=dvir-app
           
           helm upgrade -i my-app ./ --debug `
             --set image.repository=$imageRepository `
             --set image.tag=$env:IMAGE_TAG `
             --set replicaCount=2 `
             --set nameOverride=world-of-games `
             --set namespace=dvir-app
           
           cd ../
           helm package my-chart
           $latestPackage = Get-ChildItem -Filter my-chart-*.tgz | Sort-Object LastWriteTime -Descending | Select-Object -First 1
           Write-Output "Latest package created: $($latestPackage.Name)"


      - name: Update Helm values
        shell: powershell
        run: |  
           cd C:\Users\USER\PycharmProjects\dvir-demo-ci-cd\my-chart
           
           $imageRepository = "$env:REGISTRY/$env:REPO_OWNER/$env:IMAGE_NAME"
           
           helm template my-app ./ --debug `
             --set image.repository=$imageRepository `
             --set image.tag=$env:IMAGE_TAG `
             --set replicaCount=2 `
             --set nameOverride=world-of-games `
             --set namespace=dvir-app
           
           helm upgrade -i my-app ./ --debug `
             --set image.repository=$imageRepository `
             --set image.tag=$env:IMAGE_TAG `
             --set replicaCount=2 `
             --set nameOverride=world-of-games `
             --set namespace=dvir-app
           
           cd ../
           helm package my-chart
           $latestPackage = Get-ChildItem -Filter my-chart-*.tgz | Sort-Object LastWriteTime -Descending | Select-Object -First 1
           Write-Output "Latest package created: $($latestPackage.Name)"

           # Verify the deployment
           kubectl get pods -n dvir-app
           kubectl get services -n dvir-app


name: PythonApp-CI
on:
  push:
    branches: ["PROD"] #the branche to be trigger
  pull_request:
    branches: ["PROD"]
env: #set the env
  IMAGE_NAME: dvir-demo
  IMAGE_TAG: v${{ github.run_number }}.0
  REGISTRY: ghcr.io
jobs:
  build:  #first step create the image of the app run on virtal env CI
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v3
      - name: Set Up Python Environment
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install application Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GHCR }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            Changes in this Release:
            - Docker image built and pushed to GHCR
            - Image tag: ${{ env.IMAGE_TAG }}
          draft: false
          prerelease: false
      - name: Release Result
        if: success()
        run: |
          echo "Release created successfully!"
          echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
      - name: Release Error
        if: failure()
        run: |
          echo "Failed to create release"

  update-cd-repo:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CD Repository
        uses: actions/checkout@v3
        with:
          repository: dvirmoyal/dvir-cd
          ref: 'PROD'
          token: ${{ secrets.PAT_TOKEN }}

      # update the repo to dvir-cd
      - name: Update Image Repository in values.yaml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'helm-app-prod/my-chart/values-prod.yaml'
          propertyPath: 'image.repository'
          value: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          repository: dvirmoyal/dvir-cd
          branch: PROD
          token: ${{ secrets.PAT_TOKEN }}
          message: 'Update image repository'

      # update the tag for the last image
      - name: Update Image Tag in values.yaml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'helm-app-prod/my-chart/values-prod.yaml'
          propertyPath: 'image.tag'
          value: ${{ env.IMAGE_TAG }}
          repository: dvirmoyal/dvir-cd
          branch: PROD
          token: ${{ secrets.PAT_TOKEN }}
          message: 'Update image tag to ${{ env.IMAGE_TAG }}'
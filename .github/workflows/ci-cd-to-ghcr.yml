name: PythonApp-CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  IMAGE_NAME: dvir-demo
  REGISTRY: ghcr.io
jobs:
  build:  #part 1 build + push image to ghcr
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout the source code
      uses: actions/checkout@v3

    - name: Configure Git
      run: |
        git config --global user.email "dvirmoyal25@gmail.com"
        git config --global user.name "dvir_moyal"

    - name: Install Commitizen
      run: |
        pip install commitizen

    - name: Bump version and create changelog
      id: bump
      run: |
        cz bump --yes
        VERSION=$(git describe --tags --abbrev=0)
        echo "VERSION=${VERSION}" >> $GITHUB_ENV


    - name: Debug VERSION
      run: echo "VERSION=${{ env.VERSION }}"


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2


    - name: Login to GitHub Container Registry #step 2 push the image
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: |
          **Docker Image:**
          - Name: `${{ env.IMAGE_NAME }}`
          - Tags:
            - `latest`
            - `${{ env.VERSION }}`
        draft: false
        prerelease: false # Mark this release as a prerelease
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  use-image:  #part 2 pull image frome ghcr to jfrog artifactory
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Pull Docker image from GHCR
      run: |
         run: docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v3
      env:
        JF_URL: https://dvirmoyal.jfrog.io
        JF_USER: ${{ secrets.JFROG_USER }}
        JF_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
    - name: Retag Docker image
      run: |
       docker tag ghcr.io/dvirmoyal/dvir-demo:${{ env.IMAGE_TAG }} dvirmoyal.jfrog.io/dvir-moyal-demo-docker/dvir-demo:${{ env.VERSION }}

    - name: Push Docker image to Artifactory
      run: |
       jf docker push dvirmoyal.jfrog.io/dvir-moyal-demo-docker/dvir-demo:${{ env.VERSION }}


name: PythonApp-CI
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
  IMAGE_NAME: dvir-demo
  IMAGE_TAG: ${{ github.sha }}
  REGISTRY: ghcr.io
jobs:
  build:  #part 1 build + push image to ghcr
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout the source code
      uses: actions/checkout@v3
    - name: Set Up Python Environment
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install application Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry #step 2 push image
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |  #add the right tag to image 
          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_GHCR }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: |
          Changes in this Release:
          - Docker image built and pushed to GHCR
          - Image tag: ${{ env.IMAGE_TAG }}
        draft: false
        prerelease: false
    - name: Release Result
      if: success()
      run: |
        echo "Release created successfully!"
        echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
    - name: Release Error
      if: failure()
      run: |
        echo "Failed to create release"
  use-image:  #part 2 pull image frome ghcr to jfrog artifactory
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Pull Docker image from GHCR
      run: |
        docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v3
      env:
        JF_URL: https://dvirmoyal.jfrog.io
        JF_USER: ${{ secrets.JFROG_USER }}
        JF_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
    - name: Retag Docker image
      run: |
       docker tag ghcr.io/dvirmoyal/dvir-demo:${{ env.IMAGE_TAG }} dvirmoyal.jfrog.io/dvir-moyal-demo-docker/dvir-demo:${{ env.IMAGE_TAG }}

    - name: Push Docker image to Artifactory
      run: |
       jf docker push dvirmoyal.jfrog.io/dvir-moyal-demo-docker/dvir-demo:${{ env.IMAGE_TAG }}


